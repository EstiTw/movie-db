{"ast":null,"code":"var _jsxFileName = \"/Users/mazal/Documents/selfProjects/reactPractice/react-practice-projects/movie-db/src/context.js\";\nimport React, { useState, useContext, useEffect, useCallback } from \"react\"; // make sure to use https\n\nimport { useFetch } from \"./useFetch\";\nexport const API_ENDPOINT = `http://www.omdbapi.com/?apikey=${process.env.REACT_APP_MOVIE_API_KEY}`;\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"batman\");\n  const [movies, setMovies] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [defaultMovies, setDefaultMovies] = useState([]);\n  const [data, setData] = useState({}); // console.log(\"context\", API_ENDPOINT);\n  // const fetchMovies = useCallback(async () => {\n  //   setLoading(true);\n  //   try {\n  //     const response = await fetch(`${API_ENDPOINT}&s=${searchTerm}`);\n  //     const data = await response.json();\n  //     const { Response } = data;\n  //     console.log(Response);\n  //     if (Response === \"False\") {\n  //       setErrorMessage(data.Error);\n  //       setMovies(defaultMovies);\n  //     } else {\n  //       setMovies(data.Search);\n  //       setErrorMessage(\"\");\n  //     }\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  //   setLoading(false);\n  // }, [searchTerm]);\n  // useEffect(() => {\n  //   fetchMovies();\n  // }, [searchTerm, fetchMovies]);\n  // const fetchMovies = useCallback(async () => {\n  //   console.log(\"fetch movies\", data);\n  // }, [searchTerm]);\n  // useEffect(() => {\n  //   fetchMovies();\n  // }, [searchTerm, fetchMovies]);\n\n  useEffect(() => {\n    if (errorMessage) console.log(errorMessage);else {\n      const {\n        Search: movies\n      } = data;\n      console.log(movies); // setMovies(movies);\n    }\n  }, [searchTerm]); // useEffect(async () => {\n  //   setLoading(true);\n  //   try {\n  //     const response = await fetch(`${API_ENDPOINT}&s=batman`);\n  //     const data = await response.json();\n  //     const { Response } = data;\n  //     if (Response === \"False\") {\n  //       setDefaultMovies([]);\n  //     } else {\n  //       setDefaultMovies(data.Search);\n  //       setMovies(data.Search);\n  //       setErrorMessage(\"\");\n  //     }\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  //   setLoading(false);\n  // }, []);\n\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      loading,\n      movies,\n      errorMessage,\n      setSearchTerm,\n      setLoading,\n      data,\n      API_ENDPOINT,\n      searchTerm,\n      setData,\n      setErrorMessage\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, children);\n}; // make sure use\n\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\nexport { AppContext, AppProvider };","map":{"version":3,"sources":["/Users/mazal/Documents/selfProjects/reactPractice/react-practice-projects/movie-db/src/context.js"],"names":["React","useState","useContext","useEffect","useCallback","useFetch","API_ENDPOINT","process","env","REACT_APP_MOVIE_API_KEY","AppContext","createContext","AppProvider","children","loading","setLoading","searchTerm","setSearchTerm","movies","setMovies","errorMessage","setErrorMessage","defaultMovies","setDefaultMovies","data","setData","console","log","Search","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,EAAiDC,WAAjD,QAAoE,OAApE,C,CACA;;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAO,MAAMC,YAAY,GAAI,kCAAiCC,OAAO,CAACC,GAAR,CAAYC,uBAAwB,EAA3F;AACP,MAAMC,UAAU,GAAGV,KAAK,CAACW,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,QAAD,CAA5C;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACmB,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACqB,aAAD,EAAgBC,gBAAhB,IAAoCtB,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACuB,IAAD,EAAOC,OAAP,IAAkBxB,QAAQ,CAAC,EAAD,CAAhC,CANoC,CAQpC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,YAAJ,EAAkBM,OAAO,CAACC,GAAR,CAAYP,YAAZ,EAAlB,KACK;AACH,YAAM;AAAEQ,QAAAA,MAAM,EAAEV;AAAV,UAAqBM,IAA3B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ,EAFG,CAGH;AACD;AACF,GAPQ,EAON,CAACF,UAAD,CAPM,CAAT,CA1CoC,CAmDpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE,oBAAC,UAAD,CAAY,QAAZ;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,OADK;AAELI,MAAAA,MAFK;AAGLE,MAAAA,YAHK;AAILH,MAAAA,aAJK;AAKLF,MAAAA,UALK;AAMLS,MAAAA,IANK;AAOLlB,MAAAA,YAPK;AAQLU,MAAAA,UARK;AASLS,MAAAA,OATK;AAULJ,MAAAA;AAVK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcGR,QAdH,CADF;AAkBD,CAxFD,C,CAyFA;;;AACA,OAAO,MAAMgB,gBAAgB,GAAG,MAAM;AACpC,SAAO3B,UAAU,CAACQ,UAAD,CAAjB;AACD,CAFM;AAIP,SAASA,UAAT,EAAqBE,WAArB","sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from \"react\";\n// make sure to use https\nimport { useFetch } from \"./useFetch\";\nexport const API_ENDPOINT = `http://www.omdbapi.com/?apikey=${process.env.REACT_APP_MOVIE_API_KEY}`;\nconst AppContext = React.createContext();\n\nconst AppProvider = ({ children }) => {\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"batman\");\n  const [movies, setMovies] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [defaultMovies, setDefaultMovies] = useState([]);\n  const [data, setData] = useState({});\n\n  // console.log(\"context\", API_ENDPOINT);\n\n  // const fetchMovies = useCallback(async () => {\n  //   setLoading(true);\n  //   try {\n  //     const response = await fetch(`${API_ENDPOINT}&s=${searchTerm}`);\n  //     const data = await response.json();\n  //     const { Response } = data;\n  //     console.log(Response);\n  //     if (Response === \"False\") {\n  //       setErrorMessage(data.Error);\n  //       setMovies(defaultMovies);\n  //     } else {\n  //       setMovies(data.Search);\n  //       setErrorMessage(\"\");\n  //     }\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  //   setLoading(false);\n  // }, [searchTerm]);\n\n  // useEffect(() => {\n  //   fetchMovies();\n  // }, [searchTerm, fetchMovies]);\n\n  // const fetchMovies = useCallback(async () => {\n  //   console.log(\"fetch movies\", data);\n  // }, [searchTerm]);\n\n  // useEffect(() => {\n  //   fetchMovies();\n  // }, [searchTerm, fetchMovies]);\n\n  useEffect(() => {\n    if (errorMessage) console.log(errorMessage);\n    else {\n      const { Search: movies } = data;\n      console.log(movies);\n      // setMovies(movies);\n    }\n  }, [searchTerm]);\n\n  // useEffect(async () => {\n  //   setLoading(true);\n  //   try {\n  //     const response = await fetch(`${API_ENDPOINT}&s=batman`);\n  //     const data = await response.json();\n  //     const { Response } = data;\n  //     if (Response === \"False\") {\n  //       setDefaultMovies([]);\n  //     } else {\n  //       setDefaultMovies(data.Search);\n  //       setMovies(data.Search);\n  //       setErrorMessage(\"\");\n  //     }\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  //   setLoading(false);\n  // }, []);\n\n  return (\n    <AppContext.Provider\n      value={{\n        loading,\n        movies,\n        errorMessage,\n        setSearchTerm,\n        setLoading,\n        data,\n        API_ENDPOINT,\n        searchTerm,\n        setData,\n        setErrorMessage,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n// make sure use\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\n\nexport { AppContext, AppProvider };\n"]},"metadata":{},"sourceType":"module"}