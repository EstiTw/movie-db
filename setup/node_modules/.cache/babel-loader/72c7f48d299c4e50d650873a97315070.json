{"ast":null,"code":"var _jsxFileName = \"/Users/mazal/Documents/selfProjects/reactPractice/react-practice-projects/movie-db/src/context.js\";\nimport React, { useState, useContext, useEffect } from \"react\"; // make sure to use https\n\nexport const API_ENDPOINT = `http://www.omdbapi.com/?apikey=${process.env.REACT_APP_MOVIE_API_KEY}`; // console.log(API_ENDPOINT);\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"ba\");\n  const [movies, setMovies] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [defaultMovies, setDefaultMovies] = useState([]);\n  console.log(\"errorMessage\", errorMessage, \"movies\", movies);\n\n  const fetchMovies = async () => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(`${API_ENDPOINT}&s=${searchTerm}`);\n      const data = await response.json();\n      const {\n        Response\n      } = data;\n\n      if (Response === \"False\") {\n        setErrorMessage(data.Error);\n        setMovies(defaultMovies); // setSearchTerm(\"batman\");\n      } else {\n        setMovies(data.Search);\n        setErrorMessage(\"\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchMovies();\n  }, [searchTerm]);\n  useEffect(async () => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(`${API_ENDPOINT}&s=batman`);\n      const data = await response.json();\n      const {\n        Response\n      } = data;\n\n      if (Response === \"False\") {\n        setDefaultMovies([]); // setSearchTerm(\"batman\");\n      } else {\n        setDefaultMovies(data.Search);\n        setMovies(data.Search);\n        setErrorMessage(\"\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    setLoading(false);\n  }, []);\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      loading,\n      movies,\n      errorMessage,\n      setSearchTerm\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, children);\n}; // make sure use\n\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\nexport { AppContext, AppProvider };","map":{"version":3,"sources":["/Users/mazal/Documents/selfProjects/reactPractice/react-practice-projects/movie-db/src/context.js"],"names":["React","useState","useContext","useEffect","API_ENDPOINT","process","env","REACT_APP_MOVIE_API_KEY","AppContext","createContext","AppProvider","children","loading","setLoading","searchTerm","setSearchTerm","movies","setMovies","errorMessage","setErrorMessage","defaultMovies","setDefaultMovies","console","log","fetchMovies","response","fetch","data","json","Response","Error","Search","error","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD,C,CACA;;AACA,OAAO,MAAMC,YAAY,GAAI,kCAAiCC,OAAO,CAACC,GAAR,CAAYC,uBAAwB,EAA3F,C,CACP;;AACA,MAAMC,UAAU,GAAGR,KAAK,CAACS,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACe,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACiB,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACmB,aAAD,EAAgBC,gBAAhB,IAAoCpB,QAAQ,CAAC,EAAD,CAAlD;AACAqB,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,YAA5B,EAA0C,QAA1C,EAAoDF,MAApD;;AAEA,QAAMQ,WAAW,GAAG,YAAY;AAC9BX,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,YAAMY,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEtB,YAAa,MAAKU,UAAW,EAAjC,CAA5B;AACA,YAAMa,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAeF,IAArB;;AACA,UAAIE,QAAQ,KAAK,OAAjB,EAA0B;AACxBV,QAAAA,eAAe,CAACQ,IAAI,CAACG,KAAN,CAAf;AACAb,QAAAA,SAAS,CAACG,aAAD,CAAT,CAFwB,CAGxB;AACD,OAJD,MAIO;AACLH,QAAAA,SAAS,CAACU,IAAI,CAACI,MAAN,CAAT;AACAZ,QAAAA,eAAe,CAAC,EAAD,CAAf;AACD;AACF,KAZD,CAYE,OAAOa,KAAP,EAAc;AACdV,MAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACD;;AACDnB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAlBD;;AAoBAV,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,WAAW;AACZ,GAFQ,EAEN,CAACV,UAAD,CAFM,CAAT;AAIAX,EAAAA,SAAS,CAAC,YAAY;AACpBU,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,YAAMY,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEtB,YAAa,WAAjB,CAA5B;AACA,YAAMuB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAeF,IAArB;;AACA,UAAIE,QAAQ,KAAK,OAAjB,EAA0B;AACxBR,QAAAA,gBAAgB,CAAC,EAAD,CAAhB,CADwB,CAExB;AACD,OAHD,MAGO;AACLA,QAAAA,gBAAgB,CAACM,IAAI,CAACI,MAAN,CAAhB;AACAd,QAAAA,SAAS,CAACU,IAAI,CAACI,MAAN,CAAT;AACAZ,QAAAA,eAAe,CAAC,EAAD,CAAf;AACD;AACF,KAZD,CAYE,OAAOa,KAAP,EAAc;AACdV,MAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACD;;AACDnB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAlBQ,EAkBN,EAlBM,CAAT;AAmBA,sBACE,oBAAC,UAAD,CAAY,QAAZ;AACE,IAAA,KAAK,EAAE;AAAED,MAAAA,OAAF;AAAWI,MAAAA,MAAX;AAAmBE,MAAAA,YAAnB;AAAiCH,MAAAA;AAAjC,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGJ,QAHH,CADF;AAOD,CA1DD,C,CA2DA;;;AACA,OAAO,MAAMsB,gBAAgB,GAAG,MAAM;AACpC,SAAO/B,UAAU,CAACM,UAAD,CAAjB;AACD,CAFM;AAIP,SAASA,UAAT,EAAqBE,WAArB","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\n// make sure to use https\nexport const API_ENDPOINT = `http://www.omdbapi.com/?apikey=${process.env.REACT_APP_MOVIE_API_KEY}`;\n// console.log(API_ENDPOINT);\nconst AppContext = React.createContext();\n\nconst AppProvider = ({ children }) => {\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"ba\");\n  const [movies, setMovies] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [defaultMovies, setDefaultMovies] = useState([]);\n  console.log(\"errorMessage\", errorMessage, \"movies\", movies);\n\n  const fetchMovies = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_ENDPOINT}&s=${searchTerm}`);\n      const data = await response.json();\n      const { Response } = data;\n      if (Response === \"False\") {\n        setErrorMessage(data.Error);\n        setMovies(defaultMovies);\n        // setSearchTerm(\"batman\");\n      } else {\n        setMovies(data.Search);\n        setErrorMessage(\"\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchMovies();\n  }, [searchTerm]);\n\n  useEffect(async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_ENDPOINT}&s=batman`);\n      const data = await response.json();\n      const { Response } = data;\n      if (Response === \"False\") {\n        setDefaultMovies([]);\n        // setSearchTerm(\"batman\");\n      } else {\n        setDefaultMovies(data.Search);\n        setMovies(data.Search);\n        setErrorMessage(\"\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  }, []);\n  return (\n    <AppContext.Provider\n      value={{ loading, movies, errorMessage, setSearchTerm }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n// make sure use\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\n\nexport { AppContext, AppProvider };\n"]},"metadata":{},"sourceType":"module"}