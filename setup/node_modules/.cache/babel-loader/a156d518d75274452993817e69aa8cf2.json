{"ast":null,"code":"var _jsxFileName = \"/Users/mazal/Documents/selfProjects/reactPractice/react-practice-projects/movie-db/src/context.js\";\nimport React, { useState, useContext, useEffect, useCallback } from \"react\"; // make sure to use https\n\nimport { useFetch } from \"./useFetch\";\nexport const API_ENDPOINT = `http://www.omdbapi.com/?apikey=${process.env.REACT_APP_MOVIE_API_KEY}`;\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"ba\");\n  const [movies, setMovies] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [defaultMovies, setDefaultMovies] = useState([]);\n  const [data, setData] = useState({}); // const fetchMovies = useCallback(async () => {\n  //   setLoading(true);\n  //   try {\n  //     const response = await fetch(`${API_ENDPOINT}&s=${searchTerm}`);\n  //     const data = await response.json();\n  //     const { Response } = data;\n  //     console.log(Response);\n  //     if (Response === \"False\") {\n  //       setErrorMessage(data.Error);\n  //       setMovies(defaultMovies);\n  //     } else {\n  //       setMovies(data.Search);\n  //       setErrorMessage(\"\");\n  //     }\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  //   setLoading(false);\n  // }, [searchTerm]);\n  // useEffect(() => {\n  //   fetchMovies();\n  // }, [searchTerm, fetchMovies]);\n\n  const fetchMovies = useCallback(async () => {\n    console.log(\"fetch movies\", data);\n  }, [searchTerm]); // useEffect(() => {\n  //   fetchMovies();\n  // }, [searchTerm, fetchMovies]);\n\n  useEffect(() => {}, [searchTerm, fetchMovies]);\n  useEffect(async () => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(`${API_ENDPOINT}&s=batman`);\n      const data = await response.json();\n      const {\n        Response\n      } = data;\n\n      if (Response === \"False\") {\n        setDefaultMovies([]);\n      } else {\n        setDefaultMovies(data.Search);\n        setMovies(data.Search);\n        setErrorMessage(\"\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    setLoading(false);\n  }, []);\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      loading,\n      movies,\n      errorMessage,\n      setSearchTerm,\n      setLoading,\n      data\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, children);\n}; // make sure use\n\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\nexport { AppContext, AppProvider };","map":{"version":3,"sources":["/Users/mazal/Documents/selfProjects/reactPractice/react-practice-projects/movie-db/src/context.js"],"names":["React","useState","useContext","useEffect","useCallback","useFetch","API_ENDPOINT","process","env","REACT_APP_MOVIE_API_KEY","AppContext","createContext","AppProvider","children","loading","setLoading","searchTerm","setSearchTerm","movies","setMovies","errorMessage","setErrorMessage","defaultMovies","setDefaultMovies","data","setData","fetchMovies","console","log","response","fetch","json","Response","Search","error","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,EAAiDC,WAAjD,QAAoE,OAApE,C,CACA;;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAO,MAAMC,YAAY,GAAI,kCAAiCC,OAAO,CAACC,GAAR,CAAYC,uBAAwB,EAA3F;AACP,MAAMC,UAAU,GAAGV,KAAK,CAACW,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACmB,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACqB,aAAD,EAAgBC,gBAAhB,IAAoCtB,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACuB,IAAD,EAAOC,OAAP,IAAkBxB,QAAQ,CAAC,EAAD,CAAhC,CANoC,CAQpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,QAAMyB,WAAW,GAAGtB,WAAW,CAAC,YAAY;AAC1CuB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BJ,IAA5B;AACD,GAF8B,EAE5B,CAACR,UAAD,CAF4B,CAA/B,CAhCoC,CAoCpC;AACA;AACA;;AAEAb,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,CAACa,UAAD,EAAaU,WAAb,CAAX,CAAT;AAEAvB,EAAAA,SAAS,CAAC,YAAY;AACpBY,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,YAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAExB,YAAa,WAAjB,CAA5B;AACA,YAAMkB,IAAI,GAAG,MAAMK,QAAQ,CAACE,IAAT,EAAnB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAeR,IAArB;;AACA,UAAIQ,QAAQ,KAAK,OAAjB,EAA0B;AACxBT,QAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,OAFD,MAEO;AACLA,QAAAA,gBAAgB,CAACC,IAAI,CAACS,MAAN,CAAhB;AACAd,QAAAA,SAAS,CAACK,IAAI,CAACS,MAAN,CAAT;AACAZ,QAAAA,eAAe,CAAC,EAAD,CAAf;AACD;AACF,KAXD,CAWE,OAAOa,KAAP,EAAc;AACdP,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD;;AACDnB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAjBQ,EAiBN,EAjBM,CAAT;AAmBA,sBACE,oBAAC,UAAD,CAAY,QAAZ;AACE,IAAA,KAAK,EAAE;AAAED,MAAAA,OAAF;AAAWI,MAAAA,MAAX;AAAmBE,MAAAA,YAAnB;AAAiCH,MAAAA,aAAjC;AAAgDF,MAAAA,UAAhD;AAA4DS,MAAAA;AAA5D,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGX,QAHH,CADF;AAOD,CApED,C,CAqEA;;;AACA,OAAO,MAAMsB,gBAAgB,GAAG,MAAM;AACpC,SAAOjC,UAAU,CAACQ,UAAD,CAAjB;AACD,CAFM;AAIP,SAASA,UAAT,EAAqBE,WAArB","sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from \"react\";\n// make sure to use https\nimport { useFetch } from \"./useFetch\";\nexport const API_ENDPOINT = `http://www.omdbapi.com/?apikey=${process.env.REACT_APP_MOVIE_API_KEY}`;\nconst AppContext = React.createContext();\n\nconst AppProvider = ({ children }) => {\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"ba\");\n  const [movies, setMovies] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [defaultMovies, setDefaultMovies] = useState([]);\n  const [data, setData] = useState({});\n\n  // const fetchMovies = useCallback(async () => {\n  //   setLoading(true);\n  //   try {\n  //     const response = await fetch(`${API_ENDPOINT}&s=${searchTerm}`);\n  //     const data = await response.json();\n  //     const { Response } = data;\n  //     console.log(Response);\n  //     if (Response === \"False\") {\n  //       setErrorMessage(data.Error);\n  //       setMovies(defaultMovies);\n  //     } else {\n  //       setMovies(data.Search);\n  //       setErrorMessage(\"\");\n  //     }\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  //   setLoading(false);\n  // }, [searchTerm]);\n\n  // useEffect(() => {\n  //   fetchMovies();\n  // }, [searchTerm, fetchMovies]);\n\n  const fetchMovies = useCallback(async () => {\n    console.log(\"fetch movies\", data);\n  }, [searchTerm]);\n\n  // useEffect(() => {\n  //   fetchMovies();\n  // }, [searchTerm, fetchMovies]);\n\n  useEffect(() => {}, [searchTerm, fetchMovies]);\n\n  useEffect(async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_ENDPOINT}&s=batman`);\n      const data = await response.json();\n      const { Response } = data;\n      if (Response === \"False\") {\n        setDefaultMovies([]);\n      } else {\n        setDefaultMovies(data.Search);\n        setMovies(data.Search);\n        setErrorMessage(\"\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  }, []);\n\n  return (\n    <AppContext.Provider\n      value={{ loading, movies, errorMessage, setSearchTerm, setLoading, data }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n// make sure use\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\n\nexport { AppContext, AppProvider };\n"]},"metadata":{},"sourceType":"module"}